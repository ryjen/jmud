package net.arg3.jmud.model;

// default package
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import net.arg3.jmud.Persistance;
import net.arg3.jmud.interfaces.IDataObject;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "account")
public class Account implements IDataObject<Long> {

	private static final long serialVersionUID = 1L;
	static final Logger log = LoggerFactory.getLogger(Account.class);

	public static Account getByLogin(String name) {

		try {
			Session sess = Persistance.getSession();
			Transaction tx = sess.beginTransaction();
			Query q = sess.createQuery("from Account " + "a where a.login = '"
					+ name + "'");

			Account a = (Account) q.uniqueResult();

			tx.commit();
			return a;

		} catch (HibernateException ex) {
			log.error(ex.getMessage());
			return null;
		}
	}

	private long id;
	private String login;
	private String email;
	private byte[] password;
	private Set<Player> players;

	public void addPlayer(Player player) {
		players.add(player);
	}

	@Override
	public int compareTo(IDataObject<Long> o) {
		return getId().compareTo(o.getId());
	}

	@Override
	public boolean equals(java.lang.Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Account other = (Account) obj;
		if (getId().equals(other.getId())) {
			return false;
		}
		if (getLogin() == null) {
			if (other.getLogin() != null) {
				return false;
			}
		} else if (!getLogin().equals(other.getLogin())) {
			return false;
		}
		return true;
	}

	@Column(name = "email", nullable = false)
	public String getEmail() {
		return this.email;
	}

	@Override
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "account_id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	@Column(name = "login", nullable = false)
	public String getLogin() {
		return this.login;
	}

	@Column(name = "password", nullable = false)
	public byte[] getPassword() {
		return this.password;
	}

	@OneToMany(cascade = CascadeType.ALL, targetEntity = Player.class, fetch = FetchType.EAGER)
	@JoinColumn(name = "account_id")
	// @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)
	public Set<Player> getPlayers() {
		return this.players;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (int) (getId() ^ (getId() >>> 32));
		result = prime * result
				+ ((getLogin() == null) ? 0 : getLogin().hashCode());
		return result;
	}

	public void removePlayer(Player player) {
		players.remove(player);
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Override
	public void setId(Long id) {
		this.id = id;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	public void setPassword(byte[] password) {
		this.password = password;
	}

	public void setPlayers(Set<Player> value) {
		players = value;
	}
}
